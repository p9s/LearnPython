* Python 相关知识点整理
** 语言基础
*** 特点
- 跨平台
- 解释型脚本语言 :: 内建高级数据结构
- 面向对象 :: 数据和逻辑分离
- 动态语言 :: 类型不固定,可随意转换, 使用前不需要声明
- 不用考虑内存问题
- 默认编码为 UTF-8
*** 运行程序
- 两种模式:
  + 脚本式编程 :: 源代码文件
  + 交互式编程 :: 输入 -> 执行 循环
- 运行脚本:
  + 显式调用: python *.py
  + IPython:  %run *.py
  + 可执行脚本:
    1. 首行添加: /usr/bin/env python
    2. 添加可执行权限: chmod +x *.py
    3. 运行: 当前目录: ./*.py 或者 添加到 PATH 之后: *.py
*** 变量
命名规则 :: 只能包含: 字母,数字,下划线
- 不能:
  + 以数字开头
  + 包含空格
  + 关键字
  + 函数名
- 建议:
  + 使用小写字母
  + 慎用:  小写字母: L 及 大写字母: O, 因为易于数字: 1 和 0 混
*** 变量赋值
- 赋值符号: =
- 增量赋值: +=
- 多重赋值: x = y = z = 1
- 多元赋值:
  + x, y = 1, 2 :: 等号两边均为: 元组, 通常元组需要使用小括号包围, *var 可用于收集多余的赋值
  + 建议增加小括号以增强可读性: (x, y, *var) = (1, 2, 3, 'a')
- 变量交换: (x,y) = (y,x)
*** 补充话题
- 注释:
  + 单行: #
  + 多行: ''' :: 三引号
- 编码:
  + 3.x :: 默认为 UTF-8
  + 2.x :: 默认为: ASCII
  + 强制指定编码: # -**- UTF-8 -**-
  + 转换: u'ABC'.encode( 'utf-8' )
- IO:
  + 输入 :: message = input('请输入需要的内容')
  + 输出 :: print( message )
** 标准数据类型
*** 标准数据类型
- Number:
  + int
  + float
  + bool
  + complex( 复数 )
- String
- Tuple
- List
- Dictionary
- Sets
- 空值 :: None
*** 数值类型
- 分类:
  + 整数:
    1. 0x :: 十六进制
    2. 0O :: 八进制
    3. 0b :: 二进制
    4. 十进制
  + 浮点数
  + 复数类型:
    1. z = a + bj
    2. a :: 实数部分: z.real
    3. b :: 虚数据部分: z.imag
- 关系:
  + 整数 -> 浮点数 -> 复数
  + 混合运算: 转为最赛类型
  + 互相转换 :: int(), float(), complex()
- 运算:
  + 整除:  //
  + 求余:  %
- BIF:
  + abs()
  + ceil()/floor() :: 上入/下舍整数
  + divmod() :: 返回无组
  + pow() :: 指数运算
  + round() :: 四舍五入
*** 字典
- 操作
  + 创建
    1. dict = { key:value, key: value }
    2. dict = {}.fromkeys([key1, key2])  ::  values 为  None
  + 访问
    1. dict[key]
    2. get( key, default=) :: 返回 value 或者 None
  + 添加
    1. dict[key_new] = 'new value'
    2. setdefault( key, default=) :: 返回 value, key 不存在时, 添加
    3. dict.update( dict2 )  :: 添加字典
  + 修改 :: dict[key] = 'new value'
  + 删除
    1. del dict[key]
    2. dict.pop(key)/popitem()  :: 返回该条目值
  + 清空
    1. dict.clean()
    2. del dict
  + 拷贝  dict.copy()   :: 浅复制
  + 遍历
    * 返回键
      1. for key, value in dict.items()
      2. for key in dict.keys()
      3. for key in dict
    * 返回值
      1. for v in dict.values()       :: 返回所有值
      2. for v in set( dict.values )  :: 剔除复制项
- 嵌套
  + 在列表中, 嵌套字典
  + 在字典中, 嵌套列表
  + 在字典中, 嵌套字典
*** 集合
- 用途
  + 成员关系测试
  + 删除重复元素
- 创建
  + {'a', 'b', 'c' }
  + set( 'abc' )
- 对比
  + set :: 无序, 可看作是没有value的字典
  + tuple :: 有序, 可看作是: 不可变列表
- 操作
  + 并集: |   :: set1 | set2
  + 交集: &   :: intersection
  + 差补: -   :: difference
  + 对称差分: ^ :: symmetric_difference
- BIF
  + 添加
    1. set.add( key )  :: 如果key 存在, 则不再进行任何操作.
#+BEGIN_SRC python
s1 = set( 'abc' )
s1.add( 'e' )
#+END_SRC
    2. set.update(seq) :: 参数可以是列表, 元组, 字典
#+BEGIN_SRC python
s1 = set( ( 'google', 'baidu', 'bing'))
s1.update( {1,3})
s1.update( [1,4], [5,6])
#+END_SRC
  + 删除
    1. set.remove(key)
    2. set.discard(obj) :: 如果 obj 存在, 则删除它
    3. set.pop()  :: 删除任意一个对象
